// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_messages_2eproto;
namespace ns3_ai_gym {
class BoxDataContainer;
struct BoxDataContainerDefaultTypeInternal;
extern BoxDataContainerDefaultTypeInternal _BoxDataContainer_default_instance_;
class BoxSpace;
struct BoxSpaceDefaultTypeInternal;
extern BoxSpaceDefaultTypeInternal _BoxSpace_default_instance_;
class DataContainer;
struct DataContainerDefaultTypeInternal;
extern DataContainerDefaultTypeInternal _DataContainer_default_instance_;
class DictDataContainer;
struct DictDataContainerDefaultTypeInternal;
extern DictDataContainerDefaultTypeInternal _DictDataContainer_default_instance_;
class DictSpace;
struct DictSpaceDefaultTypeInternal;
extern DictSpaceDefaultTypeInternal _DictSpace_default_instance_;
class DiscreteDataContainer;
struct DiscreteDataContainerDefaultTypeInternal;
extern DiscreteDataContainerDefaultTypeInternal _DiscreteDataContainer_default_instance_;
class DiscreteSpace;
struct DiscreteSpaceDefaultTypeInternal;
extern DiscreteSpaceDefaultTypeInternal _DiscreteSpace_default_instance_;
class EnvActMsg;
struct EnvActMsgDefaultTypeInternal;
extern EnvActMsgDefaultTypeInternal _EnvActMsg_default_instance_;
class EnvStateMsg;
struct EnvStateMsgDefaultTypeInternal;
extern EnvStateMsgDefaultTypeInternal _EnvStateMsg_default_instance_;
class SimInitAck;
struct SimInitAckDefaultTypeInternal;
extern SimInitAckDefaultTypeInternal _SimInitAck_default_instance_;
class SimInitMsg;
struct SimInitMsgDefaultTypeInternal;
extern SimInitMsgDefaultTypeInternal _SimInitMsg_default_instance_;
class SpaceDescription;
struct SpaceDescriptionDefaultTypeInternal;
extern SpaceDescriptionDefaultTypeInternal _SpaceDescription_default_instance_;
class TupleDataContainer;
struct TupleDataContainerDefaultTypeInternal;
extern TupleDataContainerDefaultTypeInternal _TupleDataContainer_default_instance_;
class TupleSpace;
struct TupleSpaceDefaultTypeInternal;
extern TupleSpaceDefaultTypeInternal _TupleSpace_default_instance_;
}  // namespace ns3_ai_gym
PROTOBUF_NAMESPACE_OPEN
template <>
::ns3_ai_gym::BoxDataContainer* Arena::CreateMaybeMessage<::ns3_ai_gym::BoxDataContainer>(Arena*);
template <>
::ns3_ai_gym::BoxSpace* Arena::CreateMaybeMessage<::ns3_ai_gym::BoxSpace>(Arena*);
template <>
::ns3_ai_gym::DataContainer* Arena::CreateMaybeMessage<::ns3_ai_gym::DataContainer>(Arena*);
template <>
::ns3_ai_gym::DictDataContainer* Arena::CreateMaybeMessage<::ns3_ai_gym::DictDataContainer>(Arena*);
template <>
::ns3_ai_gym::DictSpace* Arena::CreateMaybeMessage<::ns3_ai_gym::DictSpace>(Arena*);
template <>
::ns3_ai_gym::DiscreteDataContainer* Arena::CreateMaybeMessage<::ns3_ai_gym::DiscreteDataContainer>(Arena*);
template <>
::ns3_ai_gym::DiscreteSpace* Arena::CreateMaybeMessage<::ns3_ai_gym::DiscreteSpace>(Arena*);
template <>
::ns3_ai_gym::EnvActMsg* Arena::CreateMaybeMessage<::ns3_ai_gym::EnvActMsg>(Arena*);
template <>
::ns3_ai_gym::EnvStateMsg* Arena::CreateMaybeMessage<::ns3_ai_gym::EnvStateMsg>(Arena*);
template <>
::ns3_ai_gym::SimInitAck* Arena::CreateMaybeMessage<::ns3_ai_gym::SimInitAck>(Arena*);
template <>
::ns3_ai_gym::SimInitMsg* Arena::CreateMaybeMessage<::ns3_ai_gym::SimInitMsg>(Arena*);
template <>
::ns3_ai_gym::SpaceDescription* Arena::CreateMaybeMessage<::ns3_ai_gym::SpaceDescription>(Arena*);
template <>
::ns3_ai_gym::TupleDataContainer* Arena::CreateMaybeMessage<::ns3_ai_gym::TupleDataContainer>(Arena*);
template <>
::ns3_ai_gym::TupleSpace* Arena::CreateMaybeMessage<::ns3_ai_gym::TupleSpace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ns3_ai_gym {
enum EnvStateMsg_Reason : int {
  EnvStateMsg_Reason_SimulationEnd = 0,
  EnvStateMsg_Reason_GameOver = 1,
  EnvStateMsg_Reason_EnvStateMsg_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EnvStateMsg_Reason_EnvStateMsg_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EnvStateMsg_Reason_IsValid(int value);
constexpr EnvStateMsg_Reason EnvStateMsg_Reason_Reason_MIN = static_cast<EnvStateMsg_Reason>(0);
constexpr EnvStateMsg_Reason EnvStateMsg_Reason_Reason_MAX = static_cast<EnvStateMsg_Reason>(1);
constexpr int EnvStateMsg_Reason_Reason_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
EnvStateMsg_Reason_descriptor();
template <typename T>
const std::string& EnvStateMsg_Reason_Name(T value) {
  static_assert(std::is_same<T, EnvStateMsg_Reason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Reason_Name().");
  return EnvStateMsg_Reason_Name(static_cast<EnvStateMsg_Reason>(value));
}
template <>
inline const std::string& EnvStateMsg_Reason_Name(EnvStateMsg_Reason value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<EnvStateMsg_Reason_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool EnvStateMsg_Reason_Parse(absl::string_view name, EnvStateMsg_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvStateMsg_Reason>(
      EnvStateMsg_Reason_descriptor(), name, value);
}
enum MsgType : int {
  Unknown = 0,
  Init = 1,
  ActionSpace = 2,
  ObservationSpace = 3,
  IsGameOver = 4,
  Observation = 5,
  Reward = 6,
  ExtraInfo = 7,
  Action = 8,
  StopEnv = 9,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = static_cast<MsgType>(0);
constexpr MsgType MsgType_MAX = static_cast<MsgType>(9);
constexpr int MsgType_ARRAYSIZE = 9 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MsgType_descriptor();
template <typename T>
const std::string& MsgType_Name(T value) {
  static_assert(std::is_same<T, MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgType_Name().");
  return MsgType_Name(static_cast<MsgType>(value));
}
template <>
inline const std::string& MsgType_Name(MsgType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<MsgType_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool MsgType_Parse(absl::string_view name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
      MsgType_descriptor(), name, value);
}
enum SpaceType : int {
  NoSpaceType = 0,
  Discrete = 1,
  Box = 2,
  Tuple = 3,
  Dict = 4,
  SpaceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SpaceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SpaceType_IsValid(int value);
constexpr SpaceType SpaceType_MIN = static_cast<SpaceType>(0);
constexpr SpaceType SpaceType_MAX = static_cast<SpaceType>(4);
constexpr int SpaceType_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
SpaceType_descriptor();
template <typename T>
const std::string& SpaceType_Name(T value) {
  static_assert(std::is_same<T, SpaceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SpaceType_Name().");
  return SpaceType_Name(static_cast<SpaceType>(value));
}
template <>
inline const std::string& SpaceType_Name(SpaceType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<SpaceType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool SpaceType_Parse(absl::string_view name, SpaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpaceType>(
      SpaceType_descriptor(), name, value);
}
enum Dtype : int {
  NoDType = 0,
  INT = 1,
  UINT = 2,
  FLOAT = 3,
  DOUBLE = 4,
  Dtype_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Dtype_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Dtype_IsValid(int value);
constexpr Dtype Dtype_MIN = static_cast<Dtype>(0);
constexpr Dtype Dtype_MAX = static_cast<Dtype>(4);
constexpr int Dtype_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Dtype_descriptor();
template <typename T>
const std::string& Dtype_Name(T value) {
  static_assert(std::is_same<T, Dtype>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Dtype_Name().");
  return Dtype_Name(static_cast<Dtype>(value));
}
template <>
inline const std::string& Dtype_Name(Dtype value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Dtype_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool Dtype_Parse(absl::string_view name, Dtype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dtype>(
      Dtype_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SpaceDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.SpaceDescription) */ {
 public:
  inline SpaceDescription() : SpaceDescription(nullptr) {}
  ~SpaceDescription() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SpaceDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpaceDescription(const SpaceDescription& from);
  SpaceDescription(SpaceDescription&& from) noexcept
    : SpaceDescription() {
    *this = ::std::move(from);
  }

  inline SpaceDescription& operator=(const SpaceDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpaceDescription& operator=(SpaceDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpaceDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpaceDescription* internal_default_instance() {
    return reinterpret_cast<const SpaceDescription*>(
               &_SpaceDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpaceDescription& a, SpaceDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(SpaceDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpaceDescription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpaceDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpaceDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpaceDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpaceDescription& from) {
    SpaceDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpaceDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.SpaceDescription";
  }
  protected:
  explicit SpaceDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kSpaceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .google.protobuf.Any space = 2;
  bool has_space() const;
  void clear_space() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& space() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_space();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_space();
  void set_allocated_space(::PROTOBUF_NAMESPACE_ID::Any* space);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_space() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_space();
  public:
  void unsafe_arena_set_allocated_space(
      ::PROTOBUF_NAMESPACE_ID::Any* space);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_space();
  // .ns3_ai_gym.SpaceType type = 1;
  void clear_type() ;
  ::ns3_ai_gym::SpaceType type() const;
  void set_type(::ns3_ai_gym::SpaceType value);

  private:
  ::ns3_ai_gym::SpaceType _internal_type() const;
  void _internal_set_type(::ns3_ai_gym::SpaceType value);

  public:
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.SpaceDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Any* space_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class DiscreteSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.DiscreteSpace) */ {
 public:
  inline DiscreteSpace() : DiscreteSpace(nullptr) {}
  ~DiscreteSpace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DiscreteSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscreteSpace(const DiscreteSpace& from);
  DiscreteSpace(DiscreteSpace&& from) noexcept
    : DiscreteSpace() {
    *this = ::std::move(from);
  }

  inline DiscreteSpace& operator=(const DiscreteSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscreteSpace& operator=(DiscreteSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscreteSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscreteSpace* internal_default_instance() {
    return reinterpret_cast<const DiscreteSpace*>(
               &_DiscreteSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DiscreteSpace& a, DiscreteSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscreteSpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscreteSpace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscreteSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscreteSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscreteSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscreteSpace& from) {
    DiscreteSpace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscreteSpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.DiscreteSpace";
  }
  protected:
  explicit DiscreteSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 1,
  };
  // int32 n = 1;
  void clear_n() ;
  ::int32_t n() const;
  void set_n(::int32_t value);

  private:
  ::int32_t _internal_n() const;
  void _internal_set_n(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.DiscreteSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t n_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class BoxSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.BoxSpace) */ {
 public:
  inline BoxSpace() : BoxSpace(nullptr) {}
  ~BoxSpace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BoxSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxSpace(const BoxSpace& from);
  BoxSpace(BoxSpace&& from) noexcept
    : BoxSpace() {
    *this = ::std::move(from);
  }

  inline BoxSpace& operator=(const BoxSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxSpace& operator=(BoxSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxSpace* internal_default_instance() {
    return reinterpret_cast<const BoxSpace*>(
               &_BoxSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BoxSpace& a, BoxSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxSpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxSpace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoxSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoxSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoxSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoxSpace& from) {
    BoxSpace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxSpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.BoxSpace";
  }
  protected:
  explicit BoxSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 4,
    kLowFieldNumber = 1,
    kHighFieldNumber = 2,
    kDtypeFieldNumber = 3,
  };
  // repeated uint32 shape = 4;
  int shape_size() const;
  private:
  int _internal_shape_size() const;

  public:
  void clear_shape() ;
  ::uint32_t shape(int index) const;
  void set_shape(int index, ::uint32_t value);
  void add_shape(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_shape();

  private:
  ::uint32_t _internal_shape(int index) const;
  void _internal_add_shape(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_shape();

  public:
  // float low = 1;
  void clear_low() ;
  float low() const;
  void set_low(float value);

  private:
  float _internal_low() const;
  void _internal_set_low(float value);

  public:
  // float high = 2;
  void clear_high() ;
  float high() const;
  void set_high(float value);

  private:
  float _internal_high() const;
  void _internal_set_high(float value);

  public:
  // .ns3_ai_gym.Dtype dtype = 3;
  void clear_dtype() ;
  ::ns3_ai_gym::Dtype dtype() const;
  void set_dtype(::ns3_ai_gym::Dtype value);

  private:
  ::ns3_ai_gym::Dtype _internal_dtype() const;
  void _internal_set_dtype(::ns3_ai_gym::Dtype value);

  public:
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.BoxSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> shape_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _shape_cached_byte_size_;
    float low_;
    float high_;
    int dtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class TupleSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.TupleSpace) */ {
 public:
  inline TupleSpace() : TupleSpace(nullptr) {}
  ~TupleSpace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TupleSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TupleSpace(const TupleSpace& from);
  TupleSpace(TupleSpace&& from) noexcept
    : TupleSpace() {
    *this = ::std::move(from);
  }

  inline TupleSpace& operator=(const TupleSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline TupleSpace& operator=(TupleSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TupleSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const TupleSpace* internal_default_instance() {
    return reinterpret_cast<const TupleSpace*>(
               &_TupleSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TupleSpace& a, TupleSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(TupleSpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TupleSpace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TupleSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TupleSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TupleSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TupleSpace& from) {
    TupleSpace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TupleSpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.TupleSpace";
  }
  protected:
  explicit TupleSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .ns3_ai_gym.SpaceDescription element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;

  public:
  void clear_element() ;
  ::ns3_ai_gym::SpaceDescription* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::SpaceDescription >*
      mutable_element();
  private:
  const ::ns3_ai_gym::SpaceDescription& _internal_element(int index) const;
  ::ns3_ai_gym::SpaceDescription* _internal_add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::SpaceDescription>& _internal_element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::SpaceDescription>* _internal_mutable_element();
  public:
  const ::ns3_ai_gym::SpaceDescription& element(int index) const;
  ::ns3_ai_gym::SpaceDescription* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::SpaceDescription >&
      element() const;
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.TupleSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::SpaceDescription > element_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class DictSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.DictSpace) */ {
 public:
  inline DictSpace() : DictSpace(nullptr) {}
  ~DictSpace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DictSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DictSpace(const DictSpace& from);
  DictSpace(DictSpace&& from) noexcept
    : DictSpace() {
    *this = ::std::move(from);
  }

  inline DictSpace& operator=(const DictSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictSpace& operator=(DictSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DictSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const DictSpace* internal_default_instance() {
    return reinterpret_cast<const DictSpace*>(
               &_DictSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DictSpace& a, DictSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(DictSpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DictSpace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DictSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DictSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DictSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DictSpace& from) {
    DictSpace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DictSpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.DictSpace";
  }
  protected:
  explicit DictSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .ns3_ai_gym.SpaceDescription element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;

  public:
  void clear_element() ;
  ::ns3_ai_gym::SpaceDescription* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::SpaceDescription >*
      mutable_element();
  private:
  const ::ns3_ai_gym::SpaceDescription& _internal_element(int index) const;
  ::ns3_ai_gym::SpaceDescription* _internal_add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::SpaceDescription>& _internal_element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::SpaceDescription>* _internal_mutable_element();
  public:
  const ::ns3_ai_gym::SpaceDescription& element(int index) const;
  ::ns3_ai_gym::SpaceDescription* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::SpaceDescription >&
      element() const;
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.DictSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::SpaceDescription > element_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class DataContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.DataContainer) */ {
 public:
  inline DataContainer() : DataContainer(nullptr) {}
  ~DataContainer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DataContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataContainer(const DataContainer& from);
  DataContainer(DataContainer&& from) noexcept
    : DataContainer() {
    *this = ::std::move(from);
  }

  inline DataContainer& operator=(const DataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataContainer& operator=(DataContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataContainer* internal_default_instance() {
    return reinterpret_cast<const DataContainer*>(
               &_DataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DataContainer& a, DataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(DataContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataContainer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataContainer& from) {
    DataContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.DataContainer";
  }
  protected:
  explicit DataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PROTOBUF_NAMESPACE_ID::Any* data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();
  // .ns3_ai_gym.SpaceType type = 1;
  void clear_type() ;
  ::ns3_ai_gym::SpaceType type() const;
  void set_type(::ns3_ai_gym::SpaceType value);

  private:
  ::ns3_ai_gym::SpaceType _internal_type() const;
  void _internal_set_type(::ns3_ai_gym::SpaceType value);

  public:
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.DataContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Any* data_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class DiscreteDataContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.DiscreteDataContainer) */ {
 public:
  inline DiscreteDataContainer() : DiscreteDataContainer(nullptr) {}
  ~DiscreteDataContainer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DiscreteDataContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscreteDataContainer(const DiscreteDataContainer& from);
  DiscreteDataContainer(DiscreteDataContainer&& from) noexcept
    : DiscreteDataContainer() {
    *this = ::std::move(from);
  }

  inline DiscreteDataContainer& operator=(const DiscreteDataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscreteDataContainer& operator=(DiscreteDataContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscreteDataContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscreteDataContainer* internal_default_instance() {
    return reinterpret_cast<const DiscreteDataContainer*>(
               &_DiscreteDataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DiscreteDataContainer& a, DiscreteDataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscreteDataContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscreteDataContainer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscreteDataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscreteDataContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscreteDataContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscreteDataContainer& from) {
    DiscreteDataContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscreteDataContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.DiscreteDataContainer";
  }
  protected:
  explicit DiscreteDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // int32 data = 1;
  void clear_data() ;
  ::int32_t data() const;
  void set_data(::int32_t value);

  private:
  ::int32_t _internal_data() const;
  void _internal_set_data(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.DiscreteDataContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class BoxDataContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.BoxDataContainer) */ {
 public:
  inline BoxDataContainer() : BoxDataContainer(nullptr) {}
  ~BoxDataContainer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BoxDataContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxDataContainer(const BoxDataContainer& from);
  BoxDataContainer(BoxDataContainer&& from) noexcept
    : BoxDataContainer() {
    *this = ::std::move(from);
  }

  inline BoxDataContainer& operator=(const BoxDataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxDataContainer& operator=(BoxDataContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxDataContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxDataContainer* internal_default_instance() {
    return reinterpret_cast<const BoxDataContainer*>(
               &_BoxDataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BoxDataContainer& a, BoxDataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxDataContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxDataContainer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoxDataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoxDataContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoxDataContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoxDataContainer& from) {
    BoxDataContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxDataContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.BoxDataContainer";
  }
  protected:
  explicit BoxDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kIntDataFieldNumber = 3,
    kUintDataFieldNumber = 4,
    kFloatDataFieldNumber = 5,
    kDoubleDataFieldNumber = 6,
    kDtypeFieldNumber = 1,
  };
  // repeated uint32 shape = 2;
  int shape_size() const;
  private:
  int _internal_shape_size() const;

  public:
  void clear_shape() ;
  ::uint32_t shape(int index) const;
  void set_shape(int index, ::uint32_t value);
  void add_shape(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_shape();

  private:
  ::uint32_t _internal_shape(int index) const;
  void _internal_add_shape(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_shape();

  public:
  // repeated int32 intData = 3;
  int intdata_size() const;
  private:
  int _internal_intdata_size() const;

  public:
  void clear_intdata() ;
  ::int32_t intdata(int index) const;
  void set_intdata(int index, ::int32_t value);
  void add_intdata(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& intdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_intdata();

  private:
  ::int32_t _internal_intdata(int index) const;
  void _internal_add_intdata(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_intdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_intdata();

  public:
  // repeated uint32 uintData = 4;
  int uintdata_size() const;
  private:
  int _internal_uintdata_size() const;

  public:
  void clear_uintdata() ;
  ::uint32_t uintdata(int index) const;
  void set_uintdata(int index, ::uint32_t value);
  void add_uintdata(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& uintdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_uintdata();

  private:
  ::uint32_t _internal_uintdata(int index) const;
  void _internal_add_uintdata(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_uintdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_uintdata();

  public:
  // repeated float floatData = 5;
  int floatdata_size() const;
  private:
  int _internal_floatdata_size() const;

  public:
  void clear_floatdata() ;
  float floatdata(int index) const;
  void set_floatdata(int index, float value);
  void add_floatdata(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& floatdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_floatdata();

  private:
  float _internal_floatdata(int index) const;
  void _internal_add_floatdata(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_floatdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_floatdata();

  public:
  // repeated double doubleData = 6;
  int doubledata_size() const;
  private:
  int _internal_doubledata_size() const;

  public:
  void clear_doubledata() ;
  double doubledata(int index) const;
  void set_doubledata(int index, double value);
  void add_doubledata(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>& doubledata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>* mutable_doubledata();

  private:
  double _internal_doubledata(int index) const;
  void _internal_add_doubledata(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>& _internal_doubledata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>* _internal_mutable_doubledata();

  public:
  // .ns3_ai_gym.Dtype dtype = 1;
  void clear_dtype() ;
  ::ns3_ai_gym::Dtype dtype() const;
  void set_dtype(::ns3_ai_gym::Dtype value);

  private:
  ::ns3_ai_gym::Dtype _internal_dtype() const;
  void _internal_set_dtype(::ns3_ai_gym::Dtype value);

  public:
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.BoxDataContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> shape_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _shape_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> intdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _intdata_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> uintdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _uintdata_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> floatdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<double> doubledata_;
    int dtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class TupleDataContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.TupleDataContainer) */ {
 public:
  inline TupleDataContainer() : TupleDataContainer(nullptr) {}
  ~TupleDataContainer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TupleDataContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TupleDataContainer(const TupleDataContainer& from);
  TupleDataContainer(TupleDataContainer&& from) noexcept
    : TupleDataContainer() {
    *this = ::std::move(from);
  }

  inline TupleDataContainer& operator=(const TupleDataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TupleDataContainer& operator=(TupleDataContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TupleDataContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const TupleDataContainer* internal_default_instance() {
    return reinterpret_cast<const TupleDataContainer*>(
               &_TupleDataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TupleDataContainer& a, TupleDataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(TupleDataContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TupleDataContainer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TupleDataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TupleDataContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TupleDataContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TupleDataContainer& from) {
    TupleDataContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TupleDataContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.TupleDataContainer";
  }
  protected:
  explicit TupleDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .ns3_ai_gym.DataContainer element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;

  public:
  void clear_element() ;
  ::ns3_ai_gym::DataContainer* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::DataContainer >*
      mutable_element();
  private:
  const ::ns3_ai_gym::DataContainer& _internal_element(int index) const;
  ::ns3_ai_gym::DataContainer* _internal_add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::DataContainer>& _internal_element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::DataContainer>* _internal_mutable_element();
  public:
  const ::ns3_ai_gym::DataContainer& element(int index) const;
  ::ns3_ai_gym::DataContainer* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::DataContainer >&
      element() const;
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.TupleDataContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::DataContainer > element_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class DictDataContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.DictDataContainer) */ {
 public:
  inline DictDataContainer() : DictDataContainer(nullptr) {}
  ~DictDataContainer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DictDataContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DictDataContainer(const DictDataContainer& from);
  DictDataContainer(DictDataContainer&& from) noexcept
    : DictDataContainer() {
    *this = ::std::move(from);
  }

  inline DictDataContainer& operator=(const DictDataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictDataContainer& operator=(DictDataContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DictDataContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DictDataContainer* internal_default_instance() {
    return reinterpret_cast<const DictDataContainer*>(
               &_DictDataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DictDataContainer& a, DictDataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(DictDataContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DictDataContainer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DictDataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DictDataContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DictDataContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DictDataContainer& from) {
    DictDataContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DictDataContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.DictDataContainer";
  }
  protected:
  explicit DictDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .ns3_ai_gym.DataContainer element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;

  public:
  void clear_element() ;
  ::ns3_ai_gym::DataContainer* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::DataContainer >*
      mutable_element();
  private:
  const ::ns3_ai_gym::DataContainer& _internal_element(int index) const;
  ::ns3_ai_gym::DataContainer* _internal_add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::DataContainer>& _internal_element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::DataContainer>* _internal_mutable_element();
  public:
  const ::ns3_ai_gym::DataContainer& element(int index) const;
  ::ns3_ai_gym::DataContainer* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::DataContainer >&
      element() const;
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.DictDataContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::DataContainer > element_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class SimInitMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.SimInitMsg) */ {
 public:
  inline SimInitMsg() : SimInitMsg(nullptr) {}
  ~SimInitMsg() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SimInitMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimInitMsg(const SimInitMsg& from);
  SimInitMsg(SimInitMsg&& from) noexcept
    : SimInitMsg() {
    *this = ::std::move(from);
  }

  inline SimInitMsg& operator=(const SimInitMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimInitMsg& operator=(SimInitMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimInitMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimInitMsg* internal_default_instance() {
    return reinterpret_cast<const SimInitMsg*>(
               &_SimInitMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SimInitMsg& a, SimInitMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SimInitMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimInitMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimInitMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimInitMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimInitMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimInitMsg& from) {
    SimInitMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimInitMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.SimInitMsg";
  }
  protected:
  explicit SimInitMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObsSpaceFieldNumber = 3,
    kActSpaceFieldNumber = 4,
    kSimProcessIdFieldNumber = 1,
    kWafShellProcessIdFieldNumber = 2,
  };
  // .ns3_ai_gym.SpaceDescription obsSpace = 3;
  bool has_obsspace() const;
  void clear_obsspace() ;
  const ::ns3_ai_gym::SpaceDescription& obsspace() const;
  PROTOBUF_NODISCARD ::ns3_ai_gym::SpaceDescription* release_obsspace();
  ::ns3_ai_gym::SpaceDescription* mutable_obsspace();
  void set_allocated_obsspace(::ns3_ai_gym::SpaceDescription* obsspace);
  private:
  const ::ns3_ai_gym::SpaceDescription& _internal_obsspace() const;
  ::ns3_ai_gym::SpaceDescription* _internal_mutable_obsspace();
  public:
  void unsafe_arena_set_allocated_obsspace(
      ::ns3_ai_gym::SpaceDescription* obsspace);
  ::ns3_ai_gym::SpaceDescription* unsafe_arena_release_obsspace();
  // .ns3_ai_gym.SpaceDescription actSpace = 4;
  bool has_actspace() const;
  void clear_actspace() ;
  const ::ns3_ai_gym::SpaceDescription& actspace() const;
  PROTOBUF_NODISCARD ::ns3_ai_gym::SpaceDescription* release_actspace();
  ::ns3_ai_gym::SpaceDescription* mutable_actspace();
  void set_allocated_actspace(::ns3_ai_gym::SpaceDescription* actspace);
  private:
  const ::ns3_ai_gym::SpaceDescription& _internal_actspace() const;
  ::ns3_ai_gym::SpaceDescription* _internal_mutable_actspace();
  public:
  void unsafe_arena_set_allocated_actspace(
      ::ns3_ai_gym::SpaceDescription* actspace);
  ::ns3_ai_gym::SpaceDescription* unsafe_arena_release_actspace();
  // uint64 simProcessId = 1;
  void clear_simprocessid() ;
  ::uint64_t simprocessid() const;
  void set_simprocessid(::uint64_t value);

  private:
  ::uint64_t _internal_simprocessid() const;
  void _internal_set_simprocessid(::uint64_t value);

  public:
  // uint64 wafShellProcessId = 2;
  void clear_wafshellprocessid() ;
  ::uint64_t wafshellprocessid() const;
  void set_wafshellprocessid(::uint64_t value);

  private:
  ::uint64_t _internal_wafshellprocessid() const;
  void _internal_set_wafshellprocessid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.SimInitMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ns3_ai_gym::SpaceDescription* obsspace_;
    ::ns3_ai_gym::SpaceDescription* actspace_;
    ::uint64_t simprocessid_;
    ::uint64_t wafshellprocessid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class SimInitAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.SimInitAck) */ {
 public:
  inline SimInitAck() : SimInitAck(nullptr) {}
  ~SimInitAck() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SimInitAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimInitAck(const SimInitAck& from);
  SimInitAck(SimInitAck&& from) noexcept
    : SimInitAck() {
    *this = ::std::move(from);
  }

  inline SimInitAck& operator=(const SimInitAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimInitAck& operator=(SimInitAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimInitAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimInitAck* internal_default_instance() {
    return reinterpret_cast<const SimInitAck*>(
               &_SimInitAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SimInitAck& a, SimInitAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SimInitAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimInitAck* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimInitAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimInitAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimInitAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimInitAck& from) {
    SimInitAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimInitAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.SimInitAck";
  }
  protected:
  explicit SimInitAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoneFieldNumber = 1,
    kStopSimReqFieldNumber = 2,
  };
  // bool done = 1;
  void clear_done() ;
  bool done() const;
  void set_done(bool value);

  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);

  public:
  // bool stopSimReq = 2;
  void clear_stopsimreq() ;
  bool stopsimreq() const;
  void set_stopsimreq(bool value);

  private:
  bool _internal_stopsimreq() const;
  void _internal_set_stopsimreq(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.SimInitAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool done_;
    bool stopsimreq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class EnvStateMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.EnvStateMsg) */ {
 public:
  inline EnvStateMsg() : EnvStateMsg(nullptr) {}
  ~EnvStateMsg() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EnvStateMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnvStateMsg(const EnvStateMsg& from);
  EnvStateMsg(EnvStateMsg&& from) noexcept
    : EnvStateMsg() {
    *this = ::std::move(from);
  }

  inline EnvStateMsg& operator=(const EnvStateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvStateMsg& operator=(EnvStateMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnvStateMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnvStateMsg* internal_default_instance() {
    return reinterpret_cast<const EnvStateMsg*>(
               &_EnvStateMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EnvStateMsg& a, EnvStateMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvStateMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvStateMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnvStateMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnvStateMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnvStateMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnvStateMsg& from) {
    EnvStateMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvStateMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.EnvStateMsg";
  }
  protected:
  explicit EnvStateMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Reason = EnvStateMsg_Reason;
  static constexpr Reason SimulationEnd = EnvStateMsg_Reason_SimulationEnd;
  static constexpr Reason GameOver = EnvStateMsg_Reason_GameOver;
  static inline bool Reason_IsValid(int value) {
    return EnvStateMsg_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN = EnvStateMsg_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX = EnvStateMsg_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE = EnvStateMsg_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reason_descriptor() {
    return EnvStateMsg_Reason_descriptor();
  }
  template <typename T>
  static inline const std::string& Reason_Name(T value) {
    return EnvStateMsg_Reason_Name(value);
  }
  static inline bool Reason_Parse(absl::string_view name, Reason* value) {
    return EnvStateMsg_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 5,
    kObsDataFieldNumber = 1,
    kRewardFieldNumber = 2,
    kIsGameOverFieldNumber = 3,
    kReasonFieldNumber = 4,
  };
  // string info = 5;
  void clear_info() ;
  const std::string& info() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* ptr);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // .ns3_ai_gym.DataContainer obsData = 1;
  bool has_obsdata() const;
  void clear_obsdata() ;
  const ::ns3_ai_gym::DataContainer& obsdata() const;
  PROTOBUF_NODISCARD ::ns3_ai_gym::DataContainer* release_obsdata();
  ::ns3_ai_gym::DataContainer* mutable_obsdata();
  void set_allocated_obsdata(::ns3_ai_gym::DataContainer* obsdata);
  private:
  const ::ns3_ai_gym::DataContainer& _internal_obsdata() const;
  ::ns3_ai_gym::DataContainer* _internal_mutable_obsdata();
  public:
  void unsafe_arena_set_allocated_obsdata(
      ::ns3_ai_gym::DataContainer* obsdata);
  ::ns3_ai_gym::DataContainer* unsafe_arena_release_obsdata();
  // float reward = 2;
  void clear_reward() ;
  float reward() const;
  void set_reward(float value);

  private:
  float _internal_reward() const;
  void _internal_set_reward(float value);

  public:
  // bool isGameOver = 3;
  void clear_isgameover() ;
  bool isgameover() const;
  void set_isgameover(bool value);

  private:
  bool _internal_isgameover() const;
  void _internal_set_isgameover(bool value);

  public:
  // .ns3_ai_gym.EnvStateMsg.Reason reason = 4;
  void clear_reason() ;
  ::ns3_ai_gym::EnvStateMsg_Reason reason() const;
  void set_reason(::ns3_ai_gym::EnvStateMsg_Reason value);

  private:
  ::ns3_ai_gym::EnvStateMsg_Reason _internal_reason() const;
  void _internal_set_reason(::ns3_ai_gym::EnvStateMsg_Reason value);

  public:
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.EnvStateMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    ::ns3_ai_gym::DataContainer* obsdata_;
    float reward_;
    bool isgameover_;
    int reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class EnvActMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_ai_gym.EnvActMsg) */ {
 public:
  inline EnvActMsg() : EnvActMsg(nullptr) {}
  ~EnvActMsg() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EnvActMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnvActMsg(const EnvActMsg& from);
  EnvActMsg(EnvActMsg&& from) noexcept
    : EnvActMsg() {
    *this = ::std::move(from);
  }

  inline EnvActMsg& operator=(const EnvActMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvActMsg& operator=(EnvActMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnvActMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnvActMsg* internal_default_instance() {
    return reinterpret_cast<const EnvActMsg*>(
               &_EnvActMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EnvActMsg& a, EnvActMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvActMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvActMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnvActMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnvActMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnvActMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnvActMsg& from) {
    EnvActMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvActMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ns3_ai_gym.EnvActMsg";
  }
  protected:
  explicit EnvActMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActDataFieldNumber = 1,
    kStopSimReqFieldNumber = 2,
  };
  // .ns3_ai_gym.DataContainer actData = 1;
  bool has_actdata() const;
  void clear_actdata() ;
  const ::ns3_ai_gym::DataContainer& actdata() const;
  PROTOBUF_NODISCARD ::ns3_ai_gym::DataContainer* release_actdata();
  ::ns3_ai_gym::DataContainer* mutable_actdata();
  void set_allocated_actdata(::ns3_ai_gym::DataContainer* actdata);
  private:
  const ::ns3_ai_gym::DataContainer& _internal_actdata() const;
  ::ns3_ai_gym::DataContainer* _internal_mutable_actdata();
  public:
  void unsafe_arena_set_allocated_actdata(
      ::ns3_ai_gym::DataContainer* actdata);
  ::ns3_ai_gym::DataContainer* unsafe_arena_release_actdata();
  // bool stopSimReq = 2;
  void clear_stopsimreq() ;
  bool stopsimreq() const;
  void set_stopsimreq(bool value);

  private:
  bool _internal_stopsimreq() const;
  void _internal_set_stopsimreq(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ns3_ai_gym.EnvActMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ns3_ai_gym::DataContainer* actdata_;
    bool stopsimreq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SpaceDescription

// .ns3_ai_gym.SpaceType type = 1;
inline void SpaceDescription::clear_type() {
  _impl_.type_ = 0;
}
inline ::ns3_ai_gym::SpaceType SpaceDescription::type() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.SpaceDescription.type)
  return _internal_type();
}
inline void SpaceDescription::set_type(::ns3_ai_gym::SpaceType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.SpaceDescription.type)
}
inline ::ns3_ai_gym::SpaceType SpaceDescription::_internal_type() const {
  return static_cast<::ns3_ai_gym::SpaceType>(_impl_.type_);
}
inline void SpaceDescription::_internal_set_type(::ns3_ai_gym::SpaceType value) {
  ;
  _impl_.type_ = value;
}

// .google.protobuf.Any space = 2;
inline bool SpaceDescription::has_space() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.space_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& SpaceDescription::_internal_space() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.space_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& SpaceDescription::space() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.SpaceDescription.space)
  return _internal_space();
}
inline void SpaceDescription::unsafe_arena_set_allocated_space(
    ::PROTOBUF_NAMESPACE_ID::Any* space) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.space_);
  }
  _impl_.space_ = space;
  if (space) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3_ai_gym.SpaceDescription.space)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SpaceDescription::release_space() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.space_;
  _impl_.space_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SpaceDescription::unsafe_arena_release_space() {
  // @@protoc_insertion_point(field_release:ns3_ai_gym.SpaceDescription.space)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.space_;
  _impl_.space_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SpaceDescription::_internal_mutable_space() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.space_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.space_ = p;
  }
  return _impl_.space_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SpaceDescription::mutable_space() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_space();
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.SpaceDescription.space)
  return _msg;
}
inline void SpaceDescription::set_allocated_space(::PROTOBUF_NAMESPACE_ID::Any* space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.space_);
  }
  if (space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(space));
    if (message_arena != submessage_arena) {
      space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, space, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.space_ = space;
  // @@protoc_insertion_point(field_set_allocated:ns3_ai_gym.SpaceDescription.space)
}

// string name = 3;
inline void SpaceDescription::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SpaceDescription::name() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.SpaceDescription.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpaceDescription::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ns3_ai_gym.SpaceDescription.name)
}
inline std::string* SpaceDescription::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.SpaceDescription.name)
  return _s;
}
inline const std::string& SpaceDescription::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SpaceDescription::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SpaceDescription::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* SpaceDescription::release_name() {
  // @@protoc_insertion_point(field_release:ns3_ai_gym.SpaceDescription.name)
  return _impl_.name_.Release();
}
inline void SpaceDescription::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ns3_ai_gym.SpaceDescription.name)
}

// -------------------------------------------------------------------

// DiscreteSpace

// int32 n = 1;
inline void DiscreteSpace::clear_n() {
  _impl_.n_ = 0;
}
inline ::int32_t DiscreteSpace::n() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.DiscreteSpace.n)
  return _internal_n();
}
inline void DiscreteSpace::set_n(::int32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.DiscreteSpace.n)
}
inline ::int32_t DiscreteSpace::_internal_n() const {
  return _impl_.n_;
}
inline void DiscreteSpace::_internal_set_n(::int32_t value) {
  ;
  _impl_.n_ = value;
}

// -------------------------------------------------------------------

// BoxSpace

// float low = 1;
inline void BoxSpace::clear_low() {
  _impl_.low_ = 0;
}
inline float BoxSpace::low() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.BoxSpace.low)
  return _internal_low();
}
inline void BoxSpace::set_low(float value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.BoxSpace.low)
}
inline float BoxSpace::_internal_low() const {
  return _impl_.low_;
}
inline void BoxSpace::_internal_set_low(float value) {
  ;
  _impl_.low_ = value;
}

// float high = 2;
inline void BoxSpace::clear_high() {
  _impl_.high_ = 0;
}
inline float BoxSpace::high() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.BoxSpace.high)
  return _internal_high();
}
inline void BoxSpace::set_high(float value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.BoxSpace.high)
}
inline float BoxSpace::_internal_high() const {
  return _impl_.high_;
}
inline void BoxSpace::_internal_set_high(float value) {
  ;
  _impl_.high_ = value;
}

// .ns3_ai_gym.Dtype dtype = 3;
inline void BoxSpace::clear_dtype() {
  _impl_.dtype_ = 0;
}
inline ::ns3_ai_gym::Dtype BoxSpace::dtype() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.BoxSpace.dtype)
  return _internal_dtype();
}
inline void BoxSpace::set_dtype(::ns3_ai_gym::Dtype value) {
   _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.BoxSpace.dtype)
}
inline ::ns3_ai_gym::Dtype BoxSpace::_internal_dtype() const {
  return static_cast<::ns3_ai_gym::Dtype>(_impl_.dtype_);
}
inline void BoxSpace::_internal_set_dtype(::ns3_ai_gym::Dtype value) {
  ;
  _impl_.dtype_ = value;
}

// repeated uint32 shape = 4;
inline int BoxSpace::_internal_shape_size() const {
  return _impl_.shape_.size();
}
inline int BoxSpace::shape_size() const {
  return _internal_shape_size();
}
inline void BoxSpace::clear_shape() {
  _internal_mutable_shape()->Clear();
}
inline ::uint32_t BoxSpace::shape(int index) const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.BoxSpace.shape)
  return _internal_shape(index);
}
inline void BoxSpace::set_shape(int index, ::uint32_t value) {
  _internal_mutable_shape()->Set(index, value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.BoxSpace.shape)
}
inline void BoxSpace::add_shape(::uint32_t value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:ns3_ai_gym.BoxSpace.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& BoxSpace::shape() const {
  // @@protoc_insertion_point(field_list:ns3_ai_gym.BoxSpace.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* BoxSpace::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:ns3_ai_gym.BoxSpace.shape)
  return _internal_mutable_shape();
}

inline ::uint32_t BoxSpace::_internal_shape(int index) const {
  return _internal_shape().Get(index);
}
inline void BoxSpace::_internal_add_shape(::uint32_t value) {
  _internal_mutable_shape()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& BoxSpace::_internal_shape() const {
  return _impl_.shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* BoxSpace::_internal_mutable_shape() {
  return &_impl_.shape_;
}

// -------------------------------------------------------------------

// TupleSpace

// repeated .ns3_ai_gym.SpaceDescription element = 1;
inline int TupleSpace::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TupleSpace::element_size() const {
  return _internal_element_size();
}
inline void TupleSpace::clear_element() {
  _internal_mutable_element()->Clear();
}
inline ::ns3_ai_gym::SpaceDescription* TupleSpace::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.TupleSpace.element)
  return _internal_mutable_element()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::SpaceDescription >*
TupleSpace::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3_ai_gym.TupleSpace.element)
  return _internal_mutable_element();
}
inline const ::ns3_ai_gym::SpaceDescription& TupleSpace::_internal_element(int index) const {
  return _internal_element().Get(index);
}
inline const ::ns3_ai_gym::SpaceDescription& TupleSpace::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.TupleSpace.element)
  return _internal_element(index);
}
inline ::ns3_ai_gym::SpaceDescription* TupleSpace::_internal_add_element() {
  return _internal_mutable_element()->Add();
}
inline ::ns3_ai_gym::SpaceDescription* TupleSpace::add_element() {
  ::ns3_ai_gym::SpaceDescription* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:ns3_ai_gym.TupleSpace.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::SpaceDescription >&
TupleSpace::element() const {
  // @@protoc_insertion_point(field_list:ns3_ai_gym.TupleSpace.element)
  return _internal_element();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::SpaceDescription>&
TupleSpace::_internal_element() const {
  return _impl_.element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::SpaceDescription>*
TupleSpace::_internal_mutable_element() {
  return &_impl_.element_;
}

// -------------------------------------------------------------------

// DictSpace

// repeated .ns3_ai_gym.SpaceDescription element = 1;
inline int DictSpace::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int DictSpace::element_size() const {
  return _internal_element_size();
}
inline void DictSpace::clear_element() {
  _internal_mutable_element()->Clear();
}
inline ::ns3_ai_gym::SpaceDescription* DictSpace::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.DictSpace.element)
  return _internal_mutable_element()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::SpaceDescription >*
DictSpace::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3_ai_gym.DictSpace.element)
  return _internal_mutable_element();
}
inline const ::ns3_ai_gym::SpaceDescription& DictSpace::_internal_element(int index) const {
  return _internal_element().Get(index);
}
inline const ::ns3_ai_gym::SpaceDescription& DictSpace::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.DictSpace.element)
  return _internal_element(index);
}
inline ::ns3_ai_gym::SpaceDescription* DictSpace::_internal_add_element() {
  return _internal_mutable_element()->Add();
}
inline ::ns3_ai_gym::SpaceDescription* DictSpace::add_element() {
  ::ns3_ai_gym::SpaceDescription* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:ns3_ai_gym.DictSpace.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::SpaceDescription >&
DictSpace::element() const {
  // @@protoc_insertion_point(field_list:ns3_ai_gym.DictSpace.element)
  return _internal_element();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::SpaceDescription>&
DictSpace::_internal_element() const {
  return _impl_.element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::SpaceDescription>*
DictSpace::_internal_mutable_element() {
  return &_impl_.element_;
}

// -------------------------------------------------------------------

// DataContainer

// .ns3_ai_gym.SpaceType type = 1;
inline void DataContainer::clear_type() {
  _impl_.type_ = 0;
}
inline ::ns3_ai_gym::SpaceType DataContainer::type() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.DataContainer.type)
  return _internal_type();
}
inline void DataContainer::set_type(::ns3_ai_gym::SpaceType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.DataContainer.type)
}
inline ::ns3_ai_gym::SpaceType DataContainer::_internal_type() const {
  return static_cast<::ns3_ai_gym::SpaceType>(_impl_.type_);
}
inline void DataContainer::_internal_set_type(::ns3_ai_gym::SpaceType value) {
  ;
  _impl_.type_ = value;
}

// .google.protobuf.Any data = 2;
inline bool DataContainer::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& DataContainer::_internal_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& DataContainer::data() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.DataContainer.data)
  return _internal_data();
}
inline void DataContainer::unsafe_arena_set_allocated_data(
    ::PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3_ai_gym.DataContainer.data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* DataContainer::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* DataContainer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:ns3_ai_gym.DataContainer.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* DataContainer::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* DataContainer::mutable_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.DataContainer.data)
  return _msg;
}
inline void DataContainer::set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:ns3_ai_gym.DataContainer.data)
}

// string name = 3;
inline void DataContainer::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DataContainer::name() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.DataContainer.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataContainer::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ns3_ai_gym.DataContainer.name)
}
inline std::string* DataContainer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.DataContainer.name)
  return _s;
}
inline const std::string& DataContainer::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DataContainer::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataContainer::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* DataContainer::release_name() {
  // @@protoc_insertion_point(field_release:ns3_ai_gym.DataContainer.name)
  return _impl_.name_.Release();
}
inline void DataContainer::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ns3_ai_gym.DataContainer.name)
}

// -------------------------------------------------------------------

// DiscreteDataContainer

// int32 data = 1;
inline void DiscreteDataContainer::clear_data() {
  _impl_.data_ = 0;
}
inline ::int32_t DiscreteDataContainer::data() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.DiscreteDataContainer.data)
  return _internal_data();
}
inline void DiscreteDataContainer::set_data(::int32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.DiscreteDataContainer.data)
}
inline ::int32_t DiscreteDataContainer::_internal_data() const {
  return _impl_.data_;
}
inline void DiscreteDataContainer::_internal_set_data(::int32_t value) {
  ;
  _impl_.data_ = value;
}

// -------------------------------------------------------------------

// BoxDataContainer

// .ns3_ai_gym.Dtype dtype = 1;
inline void BoxDataContainer::clear_dtype() {
  _impl_.dtype_ = 0;
}
inline ::ns3_ai_gym::Dtype BoxDataContainer::dtype() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.BoxDataContainer.dtype)
  return _internal_dtype();
}
inline void BoxDataContainer::set_dtype(::ns3_ai_gym::Dtype value) {
   _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.BoxDataContainer.dtype)
}
inline ::ns3_ai_gym::Dtype BoxDataContainer::_internal_dtype() const {
  return static_cast<::ns3_ai_gym::Dtype>(_impl_.dtype_);
}
inline void BoxDataContainer::_internal_set_dtype(::ns3_ai_gym::Dtype value) {
  ;
  _impl_.dtype_ = value;
}

// repeated uint32 shape = 2;
inline int BoxDataContainer::_internal_shape_size() const {
  return _impl_.shape_.size();
}
inline int BoxDataContainer::shape_size() const {
  return _internal_shape_size();
}
inline void BoxDataContainer::clear_shape() {
  _internal_mutable_shape()->Clear();
}
inline ::uint32_t BoxDataContainer::shape(int index) const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.BoxDataContainer.shape)
  return _internal_shape(index);
}
inline void BoxDataContainer::set_shape(int index, ::uint32_t value) {
  _internal_mutable_shape()->Set(index, value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.BoxDataContainer.shape)
}
inline void BoxDataContainer::add_shape(::uint32_t value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:ns3_ai_gym.BoxDataContainer.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& BoxDataContainer::shape() const {
  // @@protoc_insertion_point(field_list:ns3_ai_gym.BoxDataContainer.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* BoxDataContainer::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:ns3_ai_gym.BoxDataContainer.shape)
  return _internal_mutable_shape();
}

inline ::uint32_t BoxDataContainer::_internal_shape(int index) const {
  return _internal_shape().Get(index);
}
inline void BoxDataContainer::_internal_add_shape(::uint32_t value) {
  _internal_mutable_shape()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& BoxDataContainer::_internal_shape() const {
  return _impl_.shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* BoxDataContainer::_internal_mutable_shape() {
  return &_impl_.shape_;
}

// repeated int32 intData = 3;
inline int BoxDataContainer::_internal_intdata_size() const {
  return _impl_.intdata_.size();
}
inline int BoxDataContainer::intdata_size() const {
  return _internal_intdata_size();
}
inline void BoxDataContainer::clear_intdata() {
  _internal_mutable_intdata()->Clear();
}
inline ::int32_t BoxDataContainer::intdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.BoxDataContainer.intData)
  return _internal_intdata(index);
}
inline void BoxDataContainer::set_intdata(int index, ::int32_t value) {
  _internal_mutable_intdata()->Set(index, value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.BoxDataContainer.intData)
}
inline void BoxDataContainer::add_intdata(::int32_t value) {
  _internal_add_intdata(value);
  // @@protoc_insertion_point(field_add:ns3_ai_gym.BoxDataContainer.intData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& BoxDataContainer::intdata() const {
  // @@protoc_insertion_point(field_list:ns3_ai_gym.BoxDataContainer.intData)
  return _internal_intdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* BoxDataContainer::mutable_intdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3_ai_gym.BoxDataContainer.intData)
  return _internal_mutable_intdata();
}

inline ::int32_t BoxDataContainer::_internal_intdata(int index) const {
  return _internal_intdata().Get(index);
}
inline void BoxDataContainer::_internal_add_intdata(::int32_t value) {
  _internal_mutable_intdata()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& BoxDataContainer::_internal_intdata() const {
  return _impl_.intdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* BoxDataContainer::_internal_mutable_intdata() {
  return &_impl_.intdata_;
}

// repeated uint32 uintData = 4;
inline int BoxDataContainer::_internal_uintdata_size() const {
  return _impl_.uintdata_.size();
}
inline int BoxDataContainer::uintdata_size() const {
  return _internal_uintdata_size();
}
inline void BoxDataContainer::clear_uintdata() {
  _internal_mutable_uintdata()->Clear();
}
inline ::uint32_t BoxDataContainer::uintdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.BoxDataContainer.uintData)
  return _internal_uintdata(index);
}
inline void BoxDataContainer::set_uintdata(int index, ::uint32_t value) {
  _internal_mutable_uintdata()->Set(index, value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.BoxDataContainer.uintData)
}
inline void BoxDataContainer::add_uintdata(::uint32_t value) {
  _internal_add_uintdata(value);
  // @@protoc_insertion_point(field_add:ns3_ai_gym.BoxDataContainer.uintData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& BoxDataContainer::uintdata() const {
  // @@protoc_insertion_point(field_list:ns3_ai_gym.BoxDataContainer.uintData)
  return _internal_uintdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* BoxDataContainer::mutable_uintdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3_ai_gym.BoxDataContainer.uintData)
  return _internal_mutable_uintdata();
}

inline ::uint32_t BoxDataContainer::_internal_uintdata(int index) const {
  return _internal_uintdata().Get(index);
}
inline void BoxDataContainer::_internal_add_uintdata(::uint32_t value) {
  _internal_mutable_uintdata()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& BoxDataContainer::_internal_uintdata() const {
  return _impl_.uintdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* BoxDataContainer::_internal_mutable_uintdata() {
  return &_impl_.uintdata_;
}

// repeated float floatData = 5;
inline int BoxDataContainer::_internal_floatdata_size() const {
  return _impl_.floatdata_.size();
}
inline int BoxDataContainer::floatdata_size() const {
  return _internal_floatdata_size();
}
inline void BoxDataContainer::clear_floatdata() {
  _internal_mutable_floatdata()->Clear();
}
inline float BoxDataContainer::floatdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.BoxDataContainer.floatData)
  return _internal_floatdata(index);
}
inline void BoxDataContainer::set_floatdata(int index, float value) {
  _internal_mutable_floatdata()->Set(index, value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.BoxDataContainer.floatData)
}
inline void BoxDataContainer::add_floatdata(float value) {
  _internal_add_floatdata(value);
  // @@protoc_insertion_point(field_add:ns3_ai_gym.BoxDataContainer.floatData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& BoxDataContainer::floatdata() const {
  // @@protoc_insertion_point(field_list:ns3_ai_gym.BoxDataContainer.floatData)
  return _internal_floatdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* BoxDataContainer::mutable_floatdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3_ai_gym.BoxDataContainer.floatData)
  return _internal_mutable_floatdata();
}

inline float BoxDataContainer::_internal_floatdata(int index) const {
  return _internal_floatdata().Get(index);
}
inline void BoxDataContainer::_internal_add_floatdata(float value) {
  _internal_mutable_floatdata()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& BoxDataContainer::_internal_floatdata() const {
  return _impl_.floatdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* BoxDataContainer::_internal_mutable_floatdata() {
  return &_impl_.floatdata_;
}

// repeated double doubleData = 6;
inline int BoxDataContainer::_internal_doubledata_size() const {
  return _impl_.doubledata_.size();
}
inline int BoxDataContainer::doubledata_size() const {
  return _internal_doubledata_size();
}
inline void BoxDataContainer::clear_doubledata() {
  _internal_mutable_doubledata()->Clear();
}
inline double BoxDataContainer::doubledata(int index) const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.BoxDataContainer.doubleData)
  return _internal_doubledata(index);
}
inline void BoxDataContainer::set_doubledata(int index, double value) {
  _internal_mutable_doubledata()->Set(index, value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.BoxDataContainer.doubleData)
}
inline void BoxDataContainer::add_doubledata(double value) {
  _internal_add_doubledata(value);
  // @@protoc_insertion_point(field_add:ns3_ai_gym.BoxDataContainer.doubleData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>& BoxDataContainer::doubledata() const {
  // @@protoc_insertion_point(field_list:ns3_ai_gym.BoxDataContainer.doubleData)
  return _internal_doubledata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>* BoxDataContainer::mutable_doubledata() {
  // @@protoc_insertion_point(field_mutable_list:ns3_ai_gym.BoxDataContainer.doubleData)
  return _internal_mutable_doubledata();
}

inline double BoxDataContainer::_internal_doubledata(int index) const {
  return _internal_doubledata().Get(index);
}
inline void BoxDataContainer::_internal_add_doubledata(double value) {
  _internal_mutable_doubledata()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>& BoxDataContainer::_internal_doubledata() const {
  return _impl_.doubledata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>* BoxDataContainer::_internal_mutable_doubledata() {
  return &_impl_.doubledata_;
}

// -------------------------------------------------------------------

// TupleDataContainer

// repeated .ns3_ai_gym.DataContainer element = 1;
inline int TupleDataContainer::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TupleDataContainer::element_size() const {
  return _internal_element_size();
}
inline void TupleDataContainer::clear_element() {
  _internal_mutable_element()->Clear();
}
inline ::ns3_ai_gym::DataContainer* TupleDataContainer::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.TupleDataContainer.element)
  return _internal_mutable_element()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::DataContainer >*
TupleDataContainer::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3_ai_gym.TupleDataContainer.element)
  return _internal_mutable_element();
}
inline const ::ns3_ai_gym::DataContainer& TupleDataContainer::_internal_element(int index) const {
  return _internal_element().Get(index);
}
inline const ::ns3_ai_gym::DataContainer& TupleDataContainer::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.TupleDataContainer.element)
  return _internal_element(index);
}
inline ::ns3_ai_gym::DataContainer* TupleDataContainer::_internal_add_element() {
  return _internal_mutable_element()->Add();
}
inline ::ns3_ai_gym::DataContainer* TupleDataContainer::add_element() {
  ::ns3_ai_gym::DataContainer* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:ns3_ai_gym.TupleDataContainer.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::DataContainer >&
TupleDataContainer::element() const {
  // @@protoc_insertion_point(field_list:ns3_ai_gym.TupleDataContainer.element)
  return _internal_element();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::DataContainer>&
TupleDataContainer::_internal_element() const {
  return _impl_.element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::DataContainer>*
TupleDataContainer::_internal_mutable_element() {
  return &_impl_.element_;
}

// -------------------------------------------------------------------

// DictDataContainer

// repeated .ns3_ai_gym.DataContainer element = 1;
inline int DictDataContainer::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int DictDataContainer::element_size() const {
  return _internal_element_size();
}
inline void DictDataContainer::clear_element() {
  _internal_mutable_element()->Clear();
}
inline ::ns3_ai_gym::DataContainer* DictDataContainer::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.DictDataContainer.element)
  return _internal_mutable_element()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::DataContainer >*
DictDataContainer::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3_ai_gym.DictDataContainer.element)
  return _internal_mutable_element();
}
inline const ::ns3_ai_gym::DataContainer& DictDataContainer::_internal_element(int index) const {
  return _internal_element().Get(index);
}
inline const ::ns3_ai_gym::DataContainer& DictDataContainer::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.DictDataContainer.element)
  return _internal_element(index);
}
inline ::ns3_ai_gym::DataContainer* DictDataContainer::_internal_add_element() {
  return _internal_mutable_element()->Add();
}
inline ::ns3_ai_gym::DataContainer* DictDataContainer::add_element() {
  ::ns3_ai_gym::DataContainer* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:ns3_ai_gym.DictDataContainer.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_ai_gym::DataContainer >&
DictDataContainer::element() const {
  // @@protoc_insertion_point(field_list:ns3_ai_gym.DictDataContainer.element)
  return _internal_element();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::DataContainer>&
DictDataContainer::_internal_element() const {
  return _impl_.element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ns3_ai_gym::DataContainer>*
DictDataContainer::_internal_mutable_element() {
  return &_impl_.element_;
}

// -------------------------------------------------------------------

// SimInitMsg

// uint64 simProcessId = 1;
inline void SimInitMsg::clear_simprocessid() {
  _impl_.simprocessid_ = ::uint64_t{0u};
}
inline ::uint64_t SimInitMsg::simprocessid() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.SimInitMsg.simProcessId)
  return _internal_simprocessid();
}
inline void SimInitMsg::set_simprocessid(::uint64_t value) {
  _internal_set_simprocessid(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.SimInitMsg.simProcessId)
}
inline ::uint64_t SimInitMsg::_internal_simprocessid() const {
  return _impl_.simprocessid_;
}
inline void SimInitMsg::_internal_set_simprocessid(::uint64_t value) {
  ;
  _impl_.simprocessid_ = value;
}

// uint64 wafShellProcessId = 2;
inline void SimInitMsg::clear_wafshellprocessid() {
  _impl_.wafshellprocessid_ = ::uint64_t{0u};
}
inline ::uint64_t SimInitMsg::wafshellprocessid() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.SimInitMsg.wafShellProcessId)
  return _internal_wafshellprocessid();
}
inline void SimInitMsg::set_wafshellprocessid(::uint64_t value) {
  _internal_set_wafshellprocessid(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.SimInitMsg.wafShellProcessId)
}
inline ::uint64_t SimInitMsg::_internal_wafshellprocessid() const {
  return _impl_.wafshellprocessid_;
}
inline void SimInitMsg::_internal_set_wafshellprocessid(::uint64_t value) {
  ;
  _impl_.wafshellprocessid_ = value;
}

// .ns3_ai_gym.SpaceDescription obsSpace = 3;
inline bool SimInitMsg::has_obsspace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.obsspace_ != nullptr);
  return value;
}
inline void SimInitMsg::clear_obsspace() {
  if (_impl_.obsspace_ != nullptr) _impl_.obsspace_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ns3_ai_gym::SpaceDescription& SimInitMsg::_internal_obsspace() const {
  const ::ns3_ai_gym::SpaceDescription* p = _impl_.obsspace_;
  return p != nullptr ? *p : reinterpret_cast<const ::ns3_ai_gym::SpaceDescription&>(
      ::ns3_ai_gym::_SpaceDescription_default_instance_);
}
inline const ::ns3_ai_gym::SpaceDescription& SimInitMsg::obsspace() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.SimInitMsg.obsSpace)
  return _internal_obsspace();
}
inline void SimInitMsg::unsafe_arena_set_allocated_obsspace(
    ::ns3_ai_gym::SpaceDescription* obsspace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obsspace_);
  }
  _impl_.obsspace_ = obsspace;
  if (obsspace) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3_ai_gym.SimInitMsg.obsSpace)
}
inline ::ns3_ai_gym::SpaceDescription* SimInitMsg::release_obsspace() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ns3_ai_gym::SpaceDescription* temp = _impl_.obsspace_;
  _impl_.obsspace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ns3_ai_gym::SpaceDescription* SimInitMsg::unsafe_arena_release_obsspace() {
  // @@protoc_insertion_point(field_release:ns3_ai_gym.SimInitMsg.obsSpace)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ns3_ai_gym::SpaceDescription* temp = _impl_.obsspace_;
  _impl_.obsspace_ = nullptr;
  return temp;
}
inline ::ns3_ai_gym::SpaceDescription* SimInitMsg::_internal_mutable_obsspace() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.obsspace_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3_ai_gym::SpaceDescription>(GetArenaForAllocation());
    _impl_.obsspace_ = p;
  }
  return _impl_.obsspace_;
}
inline ::ns3_ai_gym::SpaceDescription* SimInitMsg::mutable_obsspace() {
  ::ns3_ai_gym::SpaceDescription* _msg = _internal_mutable_obsspace();
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.SimInitMsg.obsSpace)
  return _msg;
}
inline void SimInitMsg::set_allocated_obsspace(::ns3_ai_gym::SpaceDescription* obsspace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.obsspace_;
  }
  if (obsspace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obsspace);
    if (message_arena != submessage_arena) {
      obsspace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsspace, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.obsspace_ = obsspace;
  // @@protoc_insertion_point(field_set_allocated:ns3_ai_gym.SimInitMsg.obsSpace)
}

// .ns3_ai_gym.SpaceDescription actSpace = 4;
inline bool SimInitMsg::has_actspace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.actspace_ != nullptr);
  return value;
}
inline void SimInitMsg::clear_actspace() {
  if (_impl_.actspace_ != nullptr) _impl_.actspace_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ns3_ai_gym::SpaceDescription& SimInitMsg::_internal_actspace() const {
  const ::ns3_ai_gym::SpaceDescription* p = _impl_.actspace_;
  return p != nullptr ? *p : reinterpret_cast<const ::ns3_ai_gym::SpaceDescription&>(
      ::ns3_ai_gym::_SpaceDescription_default_instance_);
}
inline const ::ns3_ai_gym::SpaceDescription& SimInitMsg::actspace() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.SimInitMsg.actSpace)
  return _internal_actspace();
}
inline void SimInitMsg::unsafe_arena_set_allocated_actspace(
    ::ns3_ai_gym::SpaceDescription* actspace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actspace_);
  }
  _impl_.actspace_ = actspace;
  if (actspace) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3_ai_gym.SimInitMsg.actSpace)
}
inline ::ns3_ai_gym::SpaceDescription* SimInitMsg::release_actspace() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ns3_ai_gym::SpaceDescription* temp = _impl_.actspace_;
  _impl_.actspace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ns3_ai_gym::SpaceDescription* SimInitMsg::unsafe_arena_release_actspace() {
  // @@protoc_insertion_point(field_release:ns3_ai_gym.SimInitMsg.actSpace)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ns3_ai_gym::SpaceDescription* temp = _impl_.actspace_;
  _impl_.actspace_ = nullptr;
  return temp;
}
inline ::ns3_ai_gym::SpaceDescription* SimInitMsg::_internal_mutable_actspace() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.actspace_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3_ai_gym::SpaceDescription>(GetArenaForAllocation());
    _impl_.actspace_ = p;
  }
  return _impl_.actspace_;
}
inline ::ns3_ai_gym::SpaceDescription* SimInitMsg::mutable_actspace() {
  ::ns3_ai_gym::SpaceDescription* _msg = _internal_mutable_actspace();
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.SimInitMsg.actSpace)
  return _msg;
}
inline void SimInitMsg::set_allocated_actspace(::ns3_ai_gym::SpaceDescription* actspace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.actspace_;
  }
  if (actspace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actspace);
    if (message_arena != submessage_arena) {
      actspace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actspace, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.actspace_ = actspace;
  // @@protoc_insertion_point(field_set_allocated:ns3_ai_gym.SimInitMsg.actSpace)
}

// -------------------------------------------------------------------

// SimInitAck

// bool done = 1;
inline void SimInitAck::clear_done() {
  _impl_.done_ = false;
}
inline bool SimInitAck::done() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.SimInitAck.done)
  return _internal_done();
}
inline void SimInitAck::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.SimInitAck.done)
}
inline bool SimInitAck::_internal_done() const {
  return _impl_.done_;
}
inline void SimInitAck::_internal_set_done(bool value) {
  ;
  _impl_.done_ = value;
}

// bool stopSimReq = 2;
inline void SimInitAck::clear_stopsimreq() {
  _impl_.stopsimreq_ = false;
}
inline bool SimInitAck::stopsimreq() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.SimInitAck.stopSimReq)
  return _internal_stopsimreq();
}
inline void SimInitAck::set_stopsimreq(bool value) {
  _internal_set_stopsimreq(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.SimInitAck.stopSimReq)
}
inline bool SimInitAck::_internal_stopsimreq() const {
  return _impl_.stopsimreq_;
}
inline void SimInitAck::_internal_set_stopsimreq(bool value) {
  ;
  _impl_.stopsimreq_ = value;
}

// -------------------------------------------------------------------

// EnvStateMsg

// .ns3_ai_gym.DataContainer obsData = 1;
inline bool EnvStateMsg::has_obsdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.obsdata_ != nullptr);
  return value;
}
inline void EnvStateMsg::clear_obsdata() {
  if (_impl_.obsdata_ != nullptr) _impl_.obsdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ns3_ai_gym::DataContainer& EnvStateMsg::_internal_obsdata() const {
  const ::ns3_ai_gym::DataContainer* p = _impl_.obsdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::ns3_ai_gym::DataContainer&>(
      ::ns3_ai_gym::_DataContainer_default_instance_);
}
inline const ::ns3_ai_gym::DataContainer& EnvStateMsg::obsdata() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.EnvStateMsg.obsData)
  return _internal_obsdata();
}
inline void EnvStateMsg::unsafe_arena_set_allocated_obsdata(
    ::ns3_ai_gym::DataContainer* obsdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obsdata_);
  }
  _impl_.obsdata_ = obsdata;
  if (obsdata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3_ai_gym.EnvStateMsg.obsData)
}
inline ::ns3_ai_gym::DataContainer* EnvStateMsg::release_obsdata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ns3_ai_gym::DataContainer* temp = _impl_.obsdata_;
  _impl_.obsdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ns3_ai_gym::DataContainer* EnvStateMsg::unsafe_arena_release_obsdata() {
  // @@protoc_insertion_point(field_release:ns3_ai_gym.EnvStateMsg.obsData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ns3_ai_gym::DataContainer* temp = _impl_.obsdata_;
  _impl_.obsdata_ = nullptr;
  return temp;
}
inline ::ns3_ai_gym::DataContainer* EnvStateMsg::_internal_mutable_obsdata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.obsdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3_ai_gym::DataContainer>(GetArenaForAllocation());
    _impl_.obsdata_ = p;
  }
  return _impl_.obsdata_;
}
inline ::ns3_ai_gym::DataContainer* EnvStateMsg::mutable_obsdata() {
  ::ns3_ai_gym::DataContainer* _msg = _internal_mutable_obsdata();
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.EnvStateMsg.obsData)
  return _msg;
}
inline void EnvStateMsg::set_allocated_obsdata(::ns3_ai_gym::DataContainer* obsdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.obsdata_;
  }
  if (obsdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obsdata);
    if (message_arena != submessage_arena) {
      obsdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.obsdata_ = obsdata;
  // @@protoc_insertion_point(field_set_allocated:ns3_ai_gym.EnvStateMsg.obsData)
}

// float reward = 2;
inline void EnvStateMsg::clear_reward() {
  _impl_.reward_ = 0;
}
inline float EnvStateMsg::reward() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.EnvStateMsg.reward)
  return _internal_reward();
}
inline void EnvStateMsg::set_reward(float value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.EnvStateMsg.reward)
}
inline float EnvStateMsg::_internal_reward() const {
  return _impl_.reward_;
}
inline void EnvStateMsg::_internal_set_reward(float value) {
  ;
  _impl_.reward_ = value;
}

// bool isGameOver = 3;
inline void EnvStateMsg::clear_isgameover() {
  _impl_.isgameover_ = false;
}
inline bool EnvStateMsg::isgameover() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.EnvStateMsg.isGameOver)
  return _internal_isgameover();
}
inline void EnvStateMsg::set_isgameover(bool value) {
  _internal_set_isgameover(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.EnvStateMsg.isGameOver)
}
inline bool EnvStateMsg::_internal_isgameover() const {
  return _impl_.isgameover_;
}
inline void EnvStateMsg::_internal_set_isgameover(bool value) {
  ;
  _impl_.isgameover_ = value;
}

// .ns3_ai_gym.EnvStateMsg.Reason reason = 4;
inline void EnvStateMsg::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::ns3_ai_gym::EnvStateMsg_Reason EnvStateMsg::reason() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.EnvStateMsg.reason)
  return _internal_reason();
}
inline void EnvStateMsg::set_reason(::ns3_ai_gym::EnvStateMsg_Reason value) {
   _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.EnvStateMsg.reason)
}
inline ::ns3_ai_gym::EnvStateMsg_Reason EnvStateMsg::_internal_reason() const {
  return static_cast<::ns3_ai_gym::EnvStateMsg_Reason>(_impl_.reason_);
}
inline void EnvStateMsg::_internal_set_reason(::ns3_ai_gym::EnvStateMsg_Reason value) {
  ;
  _impl_.reason_ = value;
}

// string info = 5;
inline void EnvStateMsg::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& EnvStateMsg::info() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.EnvStateMsg.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EnvStateMsg::set_info(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ns3_ai_gym.EnvStateMsg.info)
}
inline std::string* EnvStateMsg::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.EnvStateMsg.info)
  return _s;
}
inline const std::string& EnvStateMsg::_internal_info() const {
  return _impl_.info_.Get();
}
inline void EnvStateMsg::_internal_set_info(const std::string& value) {
  ;


  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* EnvStateMsg::_internal_mutable_info() {
  ;
  return _impl_.info_.Mutable( GetArenaForAllocation());
}
inline std::string* EnvStateMsg::release_info() {
  // @@protoc_insertion_point(field_release:ns3_ai_gym.EnvStateMsg.info)
  return _impl_.info_.Release();
}
inline void EnvStateMsg::set_allocated_info(std::string* value) {
  _impl_.info_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.info_.IsDefault()) {
          _impl_.info_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ns3_ai_gym.EnvStateMsg.info)
}

// -------------------------------------------------------------------

// EnvActMsg

// .ns3_ai_gym.DataContainer actData = 1;
inline bool EnvActMsg::has_actdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.actdata_ != nullptr);
  return value;
}
inline void EnvActMsg::clear_actdata() {
  if (_impl_.actdata_ != nullptr) _impl_.actdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ns3_ai_gym::DataContainer& EnvActMsg::_internal_actdata() const {
  const ::ns3_ai_gym::DataContainer* p = _impl_.actdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::ns3_ai_gym::DataContainer&>(
      ::ns3_ai_gym::_DataContainer_default_instance_);
}
inline const ::ns3_ai_gym::DataContainer& EnvActMsg::actdata() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.EnvActMsg.actData)
  return _internal_actdata();
}
inline void EnvActMsg::unsafe_arena_set_allocated_actdata(
    ::ns3_ai_gym::DataContainer* actdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actdata_);
  }
  _impl_.actdata_ = actdata;
  if (actdata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3_ai_gym.EnvActMsg.actData)
}
inline ::ns3_ai_gym::DataContainer* EnvActMsg::release_actdata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ns3_ai_gym::DataContainer* temp = _impl_.actdata_;
  _impl_.actdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ns3_ai_gym::DataContainer* EnvActMsg::unsafe_arena_release_actdata() {
  // @@protoc_insertion_point(field_release:ns3_ai_gym.EnvActMsg.actData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ns3_ai_gym::DataContainer* temp = _impl_.actdata_;
  _impl_.actdata_ = nullptr;
  return temp;
}
inline ::ns3_ai_gym::DataContainer* EnvActMsg::_internal_mutable_actdata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.actdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3_ai_gym::DataContainer>(GetArenaForAllocation());
    _impl_.actdata_ = p;
  }
  return _impl_.actdata_;
}
inline ::ns3_ai_gym::DataContainer* EnvActMsg::mutable_actdata() {
  ::ns3_ai_gym::DataContainer* _msg = _internal_mutable_actdata();
  // @@protoc_insertion_point(field_mutable:ns3_ai_gym.EnvActMsg.actData)
  return _msg;
}
inline void EnvActMsg::set_allocated_actdata(::ns3_ai_gym::DataContainer* actdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.actdata_;
  }
  if (actdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actdata);
    if (message_arena != submessage_arena) {
      actdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.actdata_ = actdata;
  // @@protoc_insertion_point(field_set_allocated:ns3_ai_gym.EnvActMsg.actData)
}

// bool stopSimReq = 2;
inline void EnvActMsg::clear_stopsimreq() {
  _impl_.stopsimreq_ = false;
}
inline bool EnvActMsg::stopsimreq() const {
  // @@protoc_insertion_point(field_get:ns3_ai_gym.EnvActMsg.stopSimReq)
  return _internal_stopsimreq();
}
inline void EnvActMsg::set_stopsimreq(bool value) {
  _internal_set_stopsimreq(value);
  // @@protoc_insertion_point(field_set:ns3_ai_gym.EnvActMsg.stopSimReq)
}
inline bool EnvActMsg::_internal_stopsimreq() const {
  return _impl_.stopsimreq_;
}
inline void EnvActMsg::_internal_set_stopsimreq(bool value) {
  ;
  _impl_.stopsimreq_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3_ai_gym


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::ns3_ai_gym::EnvStateMsg_Reason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ns3_ai_gym::EnvStateMsg_Reason>() {
  return ::ns3_ai_gym::EnvStateMsg_Reason_descriptor();
}
template <>
struct is_proto_enum<::ns3_ai_gym::MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ns3_ai_gym::MsgType>() {
  return ::ns3_ai_gym::MsgType_descriptor();
}
template <>
struct is_proto_enum<::ns3_ai_gym::SpaceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ns3_ai_gym::SpaceType>() {
  return ::ns3_ai_gym::SpaceType_descriptor();
}
template <>
struct is_proto_enum<::ns3_ai_gym::Dtype> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ns3_ai_gym::Dtype>() {
  return ::ns3_ai_gym::Dtype_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh
